<!-- component -->
<style>
  #journal-scroll::-webkit-scrollbar {
            width: 4px;
            cursor: pointer;
            /*background-color: rgba(229, 231, 235, var(--bg-opacity));*/

        }
        #journal-scroll::-webkit-scrollbar-track {
            background-color: rgba(229, 231, 235, var(--bg-opacity));
            cursor: pointer;
            /*background: red;*/
        }
        #journal-scroll::-webkit-scrollbar-thumb {
            cursor: pointer;
            background-color: #a0aec0;
            /*outline: 1px solid slategrey;*/
        }
</style>



<div class="max-w-3xl mx-auto py-10 px-2">
    <div class="bg-white rounded-2xl shadow p-4">
        <div class="text-4xl font-extralight text-black px-5 py-2 border-b border-black border-b-2">
            Upcoming Readings
        </div>
        <div class="overflow-auto" id="journal-scroll">
            <table class="w-full">
                <tbody>
{% set readings = publicreading if publicreading else [] %}
{% set current = nextReading %}
{% set startIndex = 0 %}
{% if current %}
    {# iterate readings to compute startIndex; output suppressed in production #}
    {% for r in readings %}
        {% if r.date == current.date %}{% set startIndex = loop.index0 + 1 %}{% endif %}
    {% endfor %}
{% endif %}
{% set total = readings | length %}
{% for reading in readings %}
        <tr class="text-xs border-b border-blue-100 hover:bg-blue-50 transition" data-pr-index="{{ loop.index0 }}">
                <td class="pl-5 pr-3 py-3 align-top w-1/3">
                        <div class="font-black text-black text-lg">{{ reading.date }}</div>
                        <div class="font-extralight text-sm text-black">{{ reading.torahTitle }}</div>
                </td>
                <td class="px-2 py-3 align-top">
                        <div class="text-gray-900 font-medium">{{ reading.torahPassage }}</div>
                        <div class="text-gray-800">{{ reading.gospelPassage }}</div>
                        <div class="text-gray-500 mt-1">Verses: <span class="font-bold">{{ reading.torahVerseTotal }}</span> / <span class="font-bold">{{ reading.gospelVerseTotal }}</span></div>
                </td>
        </tr>
{% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Client-side pagination controls (10 items per page) -->
<div class="max-w-3xl mx-auto py-6 px-2">
    <nav id="pr-pager" class="flex items-center justify-center gap-2" aria-label="Pagination"></nav>
</div>

<script>
    (function(){
        // Configuration
        const pageSize = 10;

        // Find all rows and compute total pages
        const tbody = document.currentScript ? document.currentScript.parentNode.querySelector('table tbody') : document.querySelector('#journal-scroll table tbody');
        if (!tbody) return;
        const rows = Array.from(tbody.querySelectorAll('tr[data-pr-index]'));
        const total = rows.length;
        if (total === 0) return;
        const totalPages = Math.ceil(total / pageSize);

        // Determine startIndex computed on the server (if present)
        // Find first row that has an index greater than the current date match
        let startIndex = 0;
        // try to read server-computed startIndex from a row attribute if the server added one
        // Fallback: keep at 0
        const firstVisible = rows.find(r => r.style.display !== 'none');
        if (firstVisible) startIndex = parseInt(firstVisible.getAttribute('data-pr-index') || '0', 10);

        // initial page â€” try to position to the page containing the server startIndex calculation
        // If server computed startIndex (when nextReading matched), we can try to detect it by finding the first row whose date matches today+ etc.
        // Simpler: start at page 0. If you want to start at the nextReading entry, set startPage accordingly in server template by adding data-start-index.
        let currentPage = Math.floor(startIndex / pageSize) || 0;

        const pager = document.getElementById('pr-pager');
        if (!pager) return;

        function renderPage(page) {
            const start = page * pageSize;
            const end = start + pageSize;
            rows.forEach((r, idx) => {
                if (idx >= start && idx < end) {
                    r.style.display = '';
                } else {
                    r.style.display = 'none';
                }
            });
            // rebuild pager
            buildPager(page);
        }

        function buildPager(activePage) {
            pager.innerHTML = '';
            // Prev
            const prev = document.createElement('button');
            prev.textContent = 'Prev';
            prev.className = 'px-3 py-2 rounded border bg-white text-gray-900';
            prev.disabled = activePage === 0;
            prev.addEventListener('click', () => { if (activePage > 0) { currentPage = activePage -1; renderPage(currentPage); } });
            pager.appendChild(prev);

            // page numbers (limit to reasonable window)
            const maxButtons = 7; // show up to 7
            let start = Math.max(0, activePage - 3);
            let finish = Math.min(totalPages -1, start + maxButtons -1);
            if (finish - start + 1 < maxButtons) {
                start = Math.max(0, finish - maxButtons + 1);
            }
            for (let i = start; i <= finish; i++) {
                const btn = document.createElement('button');
                btn.textContent = (i + 1).toString();
                btn.className = (i === activePage) ? 'px-3 py-2 rounded bg-gray-900 text-white' : 'px-3 py-2 rounded bg-white text-gray-900 border';
                btn.addEventListener('click', (e) => { currentPage = i; renderPage(currentPage); });
                pager.appendChild(btn);
            }

            // Next
            const next = document.createElement('button');
            next.textContent = 'Next';
            next.className = 'px-3 py-2 rounded border bg-white text-gray-900';
            next.disabled = activePage >= totalPages -1;
            next.addEventListener('click', () => { if (activePage < totalPages -1) { currentPage = activePage +1; renderPage(currentPage); } });
            pager.appendChild(next);
        }

        // Initialize
        renderPage(currentPage);
    })();
</script>